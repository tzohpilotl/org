<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-03-10T13:42:52-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Notes On Programming</title><subtitle>Some notes about programming.</subtitle><entry><title type="html">Unit Tests In React</title><link href="http://localhost:4000/2022/03/10/unit-tests-in-react.html" rel="alternate" type="text/html" title="Unit Tests In React" /><published>2022-03-10T00:00:00-06:00</published><updated>2022-03-10T00:00:00-06:00</updated><id>http://localhost:4000/2022/03/10/unit-tests-in-react</id><content type="html" xml:base="http://localhost:4000/2022/03/10/unit-tests-in-react.html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#org39c2ac9&quot;&gt;Context&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#orgdbe1ef2&quot;&gt;Unit Tests Scope In React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#org45820bd&quot;&gt;Testing State vs Testing Outcomes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#orge8b32da&quot;&gt;When To Test The Redux &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;connect&lt;/code&gt; HOC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#org6ae15a5&quot;&gt;How To Test React Components&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#orge927f27&quot;&gt;QA&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a id=&quot;org39c2ac9&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;context&quot;&gt;Context&lt;/h1&gt;

&lt;h2 id=&quot;unit-tests-benefits&quot;&gt;Unit Tests Benefits&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Ensure code correctness at the lowest level&lt;/li&gt;
  &lt;li&gt;Prevents bug regressions&lt;/li&gt;
  &lt;li&gt;Makes code coverage look cool 😎&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;NOTES&quot; id=&quot;org138d32d&quot;&gt;
&lt;p&gt;
Unit testing is the first tool programmers have to ensure the correctness of
their programs.
&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&quot;unit-tests-definition&quot;&gt;Unit Tests Definition&lt;/h2&gt;

&lt;p&gt;What makes a unit test a unit test is its scope:&lt;/p&gt;

&lt;p&gt;Unit tests should only test one unit a time.&lt;/p&gt;

&lt;div class=&quot;NOTES&quot; id=&quot;org1f5d29c&quot;&gt;
&lt;p&gt;
A unit is a diffuse term but it usually refers to a function or a class. A good
unit test proves the outcome of the unit under test is correct for all it&apos;s
logic branches, and for the relevant inputs. Fortunately, reaping the benefits
of unit testing is not hard because the latest developments in technology make
writing unit tests easy.
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a id=&quot;orgdbe1ef2&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;unit-tests-scope-in-react&quot;&gt;Unit Tests Scope In React&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Keep in mind the React component ultimate purpose: to generate HTML code&lt;/li&gt;
  &lt;li&gt;A component is a unit&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;NOTES&quot; id=&quot;orgdc28244&quot;&gt;
&lt;p&gt;
As in every kind application, React apps benefit from having unit tests, but
they come with their own set of complications. What&apos;s generally accepted though,
is that a React component, especially if it&apos;s simple as in markup-only
components, but even if it&apos;s complex, with state management, children, and
network calls, is an unit. With the exception of higher-order-components,
something we should always keep in mind while testing is a component&apos;s
fundamental &lt;i&gt;purpose&lt;/i&gt;: to generate HTML code. This means that all that state
handling, network calling, and children bearing, will ultimately result in a
tree of HTML tags ready to be rendered by the browser.
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a id=&quot;org45820bd&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;testing-state-vs-testing-outcomes&quot;&gt;Testing State vs Testing Outcomes&lt;/h1&gt;

&lt;p&gt;When developing unit tests there are two common approaches:
Testing state and testing outcomes.&lt;/p&gt;

&lt;h2 id=&quot;testing-a-units-state&quot;&gt;Testing A Unit’s State&lt;/h2&gt;

&lt;p&gt;Testing state is the practice of querying the state of the unit at a given
moment of time. In React, this can be seen in tests that assert the props and/or
the state of the component is what we expect it to be at interesting points in
time, for example, when a component is rendered for the first time, or when a
button has been clicked.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;assert/strict&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&amp;lt;p&amp;gt;Clicked &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;NOTES&quot; id=&quot;orgfac2f61&quot;&gt;
&lt;p&gt;
My guess is we do this because when we debug we usually make sure the state is
correct step by step during the execution of our program.
&lt;/p&gt;

&lt;p&gt;
What happens if we change the type of &lt;code&gt;state.count&lt;/code&gt;?
What happens if we change &lt;code&gt;state.count&lt;/code&gt; for &lt;code&gt;state.clicks&lt;/code&gt;?
What happens if we pass the count as parameter (prop) instead of storing it as
state?
What happens if we change the word &quot;Clicked&quot; for &quot;Clidkec&quot; in the render method?
&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&quot;testing-a-units-purpose&quot;&gt;Testing A Unit’s Purpose&lt;/h2&gt;

&lt;p&gt;Testing outcomes refers to the practice of testing a unit delivers the outcomes
it’s designed to deliver. In React, this means we should test a component
delivers the desired HTML code given a known context.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;assert/strict&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&amp;lt;p&amp;gt;Clicked &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getInnerText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;gt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;lt;\/&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;gt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/gi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getInnerText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Clicked 0`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getInnerText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Clicked 1`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;test-value&quot;&gt;Test Value&lt;/h2&gt;

&lt;p&gt;The value of a test has to be proposed case by case, it depends on the unit’s
purpose.&lt;/p&gt;

&lt;p&gt;Let’s examine the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter&lt;/code&gt; component.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&amp;lt;p&amp;gt;Clicked &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the source code, we can tell that the counter component’s output is some
HTML code that includes the number of times its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onClick&lt;/code&gt; callback has been
called, but in the end, the component’s expected &lt;em&gt;outcome&lt;/em&gt; is this:&lt;/p&gt;

&lt;p&gt;to show a user how many times the counter has been clicked.&lt;/p&gt;

&lt;p&gt;Note that neither the fact that the counter comes from state or props, nor if
the text is displayed inside a paragraph or a list item matters to the end user.&lt;/p&gt;

&lt;h2 id=&quot;test-robustness&quot;&gt;Test Robustness&lt;/h2&gt;

&lt;p&gt;For every testing approach (testing a unit’s state and testing a unit’s
purpose), ask the following questions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What happens if we change the type of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state.count&lt;/code&gt;?&lt;/li&gt;
  &lt;li&gt;What happens if we change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state.count&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state.clicks&lt;/code&gt;?&lt;/li&gt;
  &lt;li&gt;What happens if we pass the count as parameter (prop) instead of storing it as state?&lt;/li&gt;
  &lt;li&gt;What happens if we change the word “Clicked” for “Clidkec” in the render method?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general, test robustness increases when we test outcomes instead of state.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;orge8b32da&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;when-to-test-the-redux-connect-hoc&quot;&gt;When To Test The Redux &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;connect&lt;/code&gt; HOC&lt;/h1&gt;

&lt;h2 id=&quot;abstract-test-value&quot;&gt;Abstract Test Value&lt;/h2&gt;

&lt;h3 id=&quot;does-it-render&quot;&gt;Does it render?&lt;/h3&gt;

&lt;h3 id=&quot;does-it-generate-the-desired-props&quot;&gt;Does it generate the desired &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;props&lt;/code&gt;?&lt;/h3&gt;

&lt;h2 id=&quot;testing-the-mapstatetoprops-function&quot;&gt;Testing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt; function&lt;/h2&gt;

&lt;p&gt;&lt;a id=&quot;org6ae15a5&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-to-test-react-components&quot;&gt;How To Test React Components&lt;/h1&gt;

&lt;h2 id=&quot;abstract-test-value-1&quot;&gt;Abstract Test Value&lt;/h2&gt;

&lt;h3 id=&quot;does-it-render-1&quot;&gt;Does it render?&lt;/h3&gt;

&lt;h3 id=&quot;does-it-generate-the-desired-html&quot;&gt;Does it generate the desired HTML?&lt;/h3&gt;

&lt;h2 id=&quot;testing-the-outcomes&quot;&gt;Testing The Outcomes&lt;/h2&gt;

&lt;h1 id=&quot;final-words&quot;&gt;Final Words&lt;/h1&gt;

&lt;p&gt;&lt;a id=&quot;orge927f27&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;qa&quot;&gt;QA&lt;/h1&gt;</content><author><name></name></author><summary type="html">Table of Contents</summary></entry></feed>